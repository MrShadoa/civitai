// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filteredRelationCount", "orderByNulls", "interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  username      String?   @unique @db.Citext
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  showNsfw      Boolean?  @default(false)
  blurNsfw      Boolean?  @default(true)
  isModerator   Boolean?  @default(false)
  tos           Boolean?  @default(false)
  createdAt     DateTime  @default(now())

  accounts             Account[]
  sessions             Session[]
  reviews              Review[]
  reviewReactions      ReviewReaction[]
  images               Image[]
  models               Model[]
  activities           UserActivity[]
  saves                SavedModel[]
  modelReports         ModelReport[]
  reviewReports        ReviewReport[]
  Import               Import[]
  keys                 ApiKey[]
  favoriteModels       FavoriteModel[]
  links                UserLink[]
  rank                 UserRank[]
  comments             Comment[]
  commentReactions     CommentReaction[]
  commentReports       CommentReport[]
  notifications        Notification[]
  notificationSettings UserNotificationSettings[]
}

enum LinkType {
  Sponsorship
  Social
  Other
}

model UserLink {
  id     Int      @id @default(autoincrement())
  userId Int
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  url    String
  type   LinkType
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum ModelType {
  Checkpoint
  TextualInversion
  Hypernetwork
  AestheticGradient
  VAE
}

enum ImportStatus {
  Pending
  Processing
  Failed
  Completed
}

model Import {
  id         Int          @id @default(autoincrement())
  userId     Int?
  user       User?        @relation(fields: [userId], references: [id], onDelete: SetNull)
  createdAt  DateTime     @default(now())
  startedAt  DateTime?
  finishedAt DateTime?
  source     String
  status     ImportStatus @default(Pending)
  data       Json?
  parentId   Int?
  parent     Import?      @relation("ImportChildren", fields: [parentId], references: [id], onDelete: SetNull)

  modelVersion ModelVersion[]
  model        Model?
  children     Import[]       @relation("ImportChildren")
  importId     Int?
}

enum ModelStatus {
  Draft
  Published
  Unpublished
}

model Model {
  id           Int         @id @default(autoincrement())
  name         String
  description  String?
  type         ModelType
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  nsfw         Boolean     @default(false)
  tosViolation Boolean     @default(false)
  poi          Boolean     @default(false)
  userId       Int
  user         User        @relation(fields: [userId], references: [id])
  status       ModelStatus @default(Draft)
  fromImport   Import?     @relation(fields: [fromImportId], references: [id], onDelete: SetNull)
  fromImportId Int?        @unique

  modelVersions  ModelVersion[]
  reviews        Review[]
  tagsOnModels   TagsOnModels[]
  metrics        ModelMetric[]
  saves          SavedModel[]
  rank           ModelRank?
  reports        ModelReport[]
  favoriteModels FavoriteModel[]
  comments       Comment[]
}

model FavoriteModel {
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  modelId   Int
  model     Model    @relation(fields: [modelId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@id([userId, modelId])
}

model ModelVersion {
  id           Int         @id @default(autoincrement())
  index        Int?
  name         String
  description  String?
  modelId      Int
  model        Model       @relation(fields: [modelId], references: [id], onDelete: Cascade)
  trainedWords String[]
  steps        Int?
  epochs       Int?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  status       ModelStatus @default(Draft)
  fromImport   Import?     @relation(fields: [fromImportId], references: [id], onDelete: SetNull)
  fromImportId Int?
  inaccurate   Boolean     @default(false)

  reviews       Review[]
  images        ImagesOnModels[]
  metrics       ModelVersionMetric[]
  rank          ModelVersionRank?
  files         ModelFile[]
  runStrategies RunStrategy[]
}

enum ScanResultCode {
  Pending
  Success
  Danger
  Error
}

enum ModelFileType {
  Model
  PrunedModel
  TrainingData
  VAE
  Config
}

enum ModelFileFormat {
  PickleTensor
  SafeTensor
}

model ModelFile {
  name              String
  url               String
  sizeKB            Float
  createdAt         DateTime         @default(now())
  type              ModelFileType
  format            ModelFileFormat?
  modelVersionId    Int
  modelVersion      ModelVersion     @relation(fields: [modelVersionId], references: [id], onDelete: Cascade)
  pickleScanResult  ScanResultCode   @default(Pending)
  exists            Boolean?
  pickleScanMessage String?
  virusScanResult   ScanResultCode   @default(Pending)
  virusScanMessage  String?
  scannedAt         DateTime?
  scanRequestedAt   DateTime?
  rawScanResult     Json?
  primary           Boolean          @default(false)

  @@id([modelVersionId, type])
}

enum MetricTimeframe {
  Day
  Week
  Month
  Year
  AllTime
}

model ModelMetric {
  model         Model           @relation(fields: [modelId], references: [id], onDelete: Cascade)
  modelId       Int
  timeframe     MetricTimeframe
  rating        Float           @default(0)
  ratingCount   Int             @default(0)
  downloadCount Int             @default(0)
  favoriteCount Int             @default(0)
  commentCount  Int             @default(0)

  @@id([modelId, timeframe])
}

model ModelVersionMetric {
  modelVersion   ModelVersion    @relation(fields: [modelVersionId], references: [id], onDelete: Cascade)
  modelVersionId Int
  timeframe      MetricTimeframe
  rating         Float           @default(0)
  ratingCount    Int             @default(0)
  downloadCount  Int             @default(0)
  favoriteCount  Int             @default(0)
  commentCount   Int             @default(0)

  @@id([modelVersionId, timeframe])
}

enum UserActivityType {
  ModelDownload
  ModelRun
  TrainingDataDownload
}

model UserActivity {
  id        Int              @id @default(autoincrement())
  userId    Int?
  user      User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  activity  UserActivityType
  details   Json?
  createdAt DateTime         @default(now())
}

enum ReportReason {
  TOSViolation
  NSFW
}

model ModelReport {
  id        Int          @id @default(autoincrement())
  modelId   Int
  model     Model        @relation(fields: [modelId], references: [id], onDelete: Cascade)
  userId    Int
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  reason    ReportReason
  createdAt DateTime     @default(now())
}

model Review {
  id             Int           @id @default(autoincrement())
  model          Model         @relation(fields: [modelId], references: [id], onDelete: Cascade)
  modelId        Int
  modelVersion   ModelVersion? @relation(fields: [modelVersionId], references: [id], onDelete: Cascade)
  modelVersionId Int?
  user           User          @relation(fields: [userId], references: [id])
  userId         Int
  text           String?
  rating         Int
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  nsfw           Boolean       @default(false)
  tosViolation   Boolean       @default(false)

  reactions       ReviewReaction[]
  imagesOnReviews ImagesOnReviews[]
  reports         ReviewReport[]
  comments        Comment[]
}

model ReviewReport {
  id        Int          @id @default(autoincrement())
  reviewId  Int
  review    Review       @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  userId    Int
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  reason    ReportReason
  createdAt DateTime     @default(now())
}

enum ReviewReactions {
  Like
  Dislike
  Laugh
  Cry
  Heart
}

model ReviewReaction {
  id        Int             @id @default(autoincrement())
  review    Review          @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  reviewId  Int
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  reaction  ReviewReactions
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  @@unique([reviewId, userId, reaction])
}

model Image {
  id        Int      @id @default(autoincrement())
  name      String?
  url       String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  meta      Json?
  hash      String?
  height    Int?
  width     Int?
  nsfw      Boolean  @default(false)

  imagesOnModels  ImagesOnModels[]
  imagesOnReviews ImagesOnReviews[]
}

enum ImageOnModelType {
  Example
  Training
}

model ImagesOnModels {
  modelVersion   ModelVersion @relation(fields: [modelVersionId], references: [id], onDelete: Cascade)
  modelVersionId Int
  image          Image        @relation(fields: [imageId], references: [id], onDelete: Cascade)
  imageId        Int
  index          Int?

  @@id([imageId, modelVersionId])
}

model ImagesOnReviews {
  review   Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  reviewId Int
  image    Image  @relation(fields: [imageId], references: [id], onDelete: Cascade)
  imageId  Int
  index    Int?

  @@id([imageId, reviewId])
}

model Tag {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  color     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tagsOnModels TagsOnModels[]
}

model TagsOnModels {
  model   Model @relation(fields: [modelId], references: [id], onDelete: Cascade)
  modelId Int
  tag     Tag   @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId   Int

  @@id([modelId, tagId])
}

model SavedModel {
  model     Model    @relation(fields: [modelId], references: [id], onDelete: Cascade)
  modelId   Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([modelId, userId])
}

model RunStrategy {
  id             Int          @id @default(autoincrement())
  modelVersionId Int
  modelVersion   ModelVersion @relation(fields: [modelVersionId], references: [id])
  partnerId      Int
  partner        Partner      @relation(fields: [partnerId], references: [id])
  url            String
  createdAt      DateTime     @default(now())
}

enum PartnerPricingModel {
  Duration
  PerImage
}

model Partner {
  id             Int                 @id @default(autoincrement())
  name           String
  homepage       String?
  tos            String?
  privacy        String?
  startupTime    Int? //Seconds
  onDemand       Boolean
  stepsPerSecond Int
  pricingModel   PartnerPricingModel
  price          String
  about          String?
  createdAt      DateTime            @default(now())
  nsfw           Boolean             @default(false)
  poi            Boolean             @default(false)
  token          String?             @unique
  runStrategies  RunStrategy[]
}

model KeyValue {
  key   String @id
  value Json
}

model ApiKey {
  key       String     @unique
  name      String
  scope     KeyScope[]
  userId    Int
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime   @default(now())

  @@unique([key, userId])
}

enum KeyScope {
  Read
  Write
}

model Comment {
  id           Int      @id @default(autoincrement())
  content      String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  nsfw         Boolean  @default(false)
  tosViolation Boolean  @default(false)
  parent       Comment? @relation("ParentComments", fields: [parentId], references: [id], onDelete: Cascade)
  parentId     Int?
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int
  model        Model    @relation(fields: [modelId], references: [id], onDelete: Cascade)
  modelId      Int
  review       Review?  @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  reviewId     Int?

  comments  Comment[]         @relation("ParentComments")
  reactions CommentReaction[]
  reports   CommentReport[]
}

model CommentReaction {
  id        Int             @id @default(autoincrement())
  commentId Int
  comment   Comment         @relation(fields: [commentId], references: [id], onDelete: Cascade)
  userId    Int
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  reaction  ReviewReactions
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  @@unique([commentId, userId, reaction])
}

model CommentReport {
  id        Int          @id @default(autoincrement())
  commentId Int
  comment   Comment      @relation(fields: [commentId], references: [id], onDelete: Cascade)
  userId    Int
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  reason    ReportReason
  createdAt DateTime     @default(now())
}

model Log {
  id        String   @id @default(cuid())
  event     String
  details   Json?
  createdAt DateTime @default(now())
}

model Notification {
  id        String    @id @default(cuid())
  userId    Int
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      String
  details   Json?
  createdAt DateTime  @default(now())
  viewedAt  DateTime?
}

model UserNotificationSettings {
  id         Int      @id @default(autoincrement())
  userId     Int
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type       String
  disabledAt DateTime @default(now())

  @@unique([userId, type])
}

/// @view
model ModelRank {
  model                    Model @relation(fields: [modelId], references: [id], onDelete: NoAction)
  modelId                  Int   @id
  downloadCountDay         Int
  downloadCountWeek        Int
  downloadCountMonth       Int
  downloadCountYear        Int
  downloadCountAllTime     Int
  ratingCountDay           Int
  ratingCountWeek          Int
  ratingCountMonth         Int
  ratingCountYear          Int
  ratingCountAllTime       Int
  ratingDay                Float
  ratingWeek               Float
  ratingMonth              Float
  ratingYear               Float
  ratingAllTime            Float
  favoriteCountDay         Int
  favoriteCountWeek        Int
  favoriteCountMonth       Int
  favoriteCountYear        Int
  favoriteCountAllTime     Int
  commentCountDay          Int
  commentCountWeek         Int
  commentCountMonth        Int
  commentCountYear         Int
  commentCountAllTime      Int
  downloadCountDayRank     Int
  downloadCountWeekRank    Int
  downloadCountMonthRank   Int
  downloadCountYearRank    Int
  downloadCountAllTimeRank Int
  ratingCountDayRank       Int
  ratingCountWeekRank      Int
  ratingCountMonthRank     Int
  ratingCountYearRank      Int
  ratingCountAllTimeRank   Int
  ratingDayRank            Int
  ratingWeekRank           Int
  ratingMonthRank          Int
  ratingYearRank           Int
  ratingAllTimeRank        Int
  favoriteCountDayRank     Int
  favoriteCountWeekRank    Int
  favoriteCountMonthRank   Int
  favoriteCountYearRank    Int
  favoriteCountAllTimeRank Int
  commentCountDayRank      Int
  commentCountWeekRank     Int
  commentCountMonthRank    Int
  commentCountYearRank     Int
  commentCountAllTimeRank  Int
}

/// @view
model ModelVersionRank {
  modelVersion             ModelVersion @relation(fields: [modelVersionId], references: [id], onDelete: NoAction)
  modelVersionId           Int          @id
  downloadCountDay         Int
  downloadCountWeek        Int
  downloadCountMonth       Int
  downloadCountYear        Int
  downloadCountAllTime     Int
  ratingCountDay           Int
  ratingCountWeek          Int
  ratingCountMonth         Int
  ratingCountYear          Int
  ratingCountAllTime       Int
  ratingDay                Float
  ratingWeek               Float
  ratingMonth              Float
  ratingYear               Float
  ratingAllTime            Float
  downloadCountDayRank     Int
  downloadCountWeekRank    Int
  downloadCountMonthRank   Int
  downloadCountYearRank    Int
  downloadCountAllTimeRank Int
  ratingCountDayRank       Int
  ratingCountWeekRank      Int
  ratingCountMonthRank     Int
  ratingCountYearRank      Int
  ratingCountAllTimeRank   Int
  ratingDayRank            Int
  ratingWeekRank           Int
  ratingMonthRank          Int
  ratingYearRank           Int
  ratingAllTimeRank        Int
}

/// @view
model UserRank {
  user                     User  @relation(fields: [userId], references: [id], onDelete: NoAction)
  userId                   Int   @id
  downloadCountDay         Int
  downloadCountWeek        Int
  downloadCountMonth       Int
  downloadCountYear        Int
  downloadCountAllTime     Int
  ratingCountDay           Int
  ratingCountWeek          Int
  ratingCountMonth         Int
  ratingCountYear          Int
  ratingCountAllTime       Int
  ratingDay                Float
  ratingWeek               Float
  ratingMonth              Float
  ratingYear               Float
  ratingAllTime            Float
  favoriteCountDay         Int
  favoriteCountWeek        Int
  favoriteCountMonth       Int
  favoriteCountYear        Int
  favoriteCountAllTime     Int
  downloadCountDayRank     Int
  downloadCountWeekRank    Int
  downloadCountMonthRank   Int
  downloadCountYearRank    Int
  downloadCountAllTimeRank Int
  ratingCountDayRank       Int
  ratingCountWeekRank      Int
  ratingCountMonthRank     Int
  ratingCountYearRank      Int
  ratingCountAllTimeRank   Int
  ratingDayRank            Int
  ratingWeekRank           Int
  ratingMonthRank          Int
  ratingYearRank           Int
  ratingAllTimeRank        Int
  favoriteCountDayRank     Int
  favoriteCountWeekRank    Int
  favoriteCountMonthRank   Int
  favoriteCountYearRank    Int
  favoriteCountAllTimeRank Int
}
